// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Cube 
{
    float3 pos;
    float4 col;
};

RWStructuredBuffer<Cube> cubes;
float resolution;
float repetitions;

float rand(float2 co)
{
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453) + 20;
}

float randCol(float2 co)
{
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float xpos = id.x / resolution;

    Cube cube = cubes[id.x];

    for (int i = 0; i < repetitions; i++)
    {
        float zPos = rand(float2(xpos,cube.pos.z));
        cube.pos.z = zPos;

        float r = randCol(float2(cube.col.r,cube.col.g));
        float g = randCol(float2(cube.col.g,cube.col.b));
        float b = randCol(float2(cube.col.b,cube.col.r));

        cube.col = float4(r,g,b,1.0);
    }

    cubes[id.x] = cube;
}
